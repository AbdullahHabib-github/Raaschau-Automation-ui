import {
  GridColDef,
  GridColumnGroup,
  GridRenderCellParams,
} from "@mui/x-data-grid";
import { Agreement } from "../../src/hooks/use-app";
import { Stack } from "@mui/material";

const numberWithCommas = (x) => {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};
const getRoundedValue = (num: string) => {
  const v = Number(num);
  const lower = Math.floor(v);
  const half = lower + 0.5;

  if (v === half) {
    return half;
  } else if (v < half) {
    return lower;
  } else {
    return Math.ceil(v);
  }
};

const getMaterial = (_, v: Agreement) => {
  const [tilbud, montage, under] = [
    // Number(v.Tilbud || 0),
    Number(v.Tilbud?.toString().replace(/,/g, "") || 0),
    Number(v.Montage || 0),
    Number(v.Underleverandør || 0),
  ];
  let value = getRoundedValue(((tilbud - montage - under) * 0.25).toFixed(0));
  value = numberWithCommas(value);
  return value;
};
const getEstimatedProjection = (_, v: Agreement) => {
  const [tilbud, montage] = [
    Number(v.Tilbud?.toString().replace(/,/g, "") || 0),
    Number(v.Montage || 0),
  ];
  let value = getRoundedValue((((tilbud - montage) * 0.1) / 830).toFixed(1));
  value = numberWithCommas(value);
  return value;
};
const getEstimatedProduction = (_, v: Agreement) => {
  const [tilbud, montage, under, material, estimate] = [
    Number(v.Tilbud?.toString().replace(/,/g, "") || 0),
    Number(v.Montage || 0),
    Number(v.Underleverandør || 0),
    Number(v.Materialer?.toString().replace(/,/g, "") || 0),
    Number(v.estimatedProjection || 0),
  ];
  let value = getRoundedValue(
    ((tilbud - montage - under - material) / 750 - estimate).toFixed(1)
  );
  value = numberWithCommas(value);
  return value;
};
const getEstimatedMontage = (_, v: Agreement) => {
  const [montage] = [Number(v.Montage || 0)];
  return getRoundedValue(((montage - montage * 0.08) / 630).toFixed(1));
};
const getProjectionDiff = (_, v: Agreement) => {
  const [estimate, real] = [
    Number(v.estimatedProjection || 0),
    Number(v.Real_Projektering_hr || 0),
  ];
  return getRoundedValue((estimate - real).toFixed(1));
};
const getProductionDiff = (_, v: Agreement) => {
  const estimatedProduction = getEstimatedProduction(_, v);
  const estimateproductionNew = Number(
    estimatedProduction?.toString().replace(/,/g, "") || 0
  );
  const realnew = Number(v.Real_Svendetimer_hr || 0);
  return getRoundedValue((estimateproductionNew - realnew).toFixed(1));
};
const getEstimateDone = (_, v: Agreement) => {
  const [estimate, real] = [
    Number(v.estimatedProduction?.toString().replace(/,/g, "") || 0),
    Number(v.ny || 0),
  ];
  let value = getRoundedValue(((estimate * real) / 100).toFixed(1));
  value = numberWithCommas(value);
  return value;
};
const getPlusMinus = (_, v: Agreement) => {
  const [estimate, real] = [
    Number(v.Real_Svendetimer_hr || 0),
    Number(v.estimateDone?.toString().replace(/,/g, "") || 0),
  ];
  let value = getRoundedValue((real - estimate).toFixed(1));
  value = numberWithCommas(value);
  return value;
};
const getMontageDiff = (_, v: Agreement) => {
  const [estimate, real] = [
    Number(v.estimatedMontage || 0),
    Number(v.Real_Montagetimer_hr || 0),
  ];
  return getRoundedValue((estimate - real).toFixed(1));
};
const getFinalMontage = (_, v: Agreement) => {
  const value = getRoundedValue((Number(v.Montage || 0) * 0.08).toFixed(1));
  if (value !== 0) {
    return value + " DKK";
  } else return value;
};
const getTilbud = (_, row: Agreement) => {
  const value = numberWithCommas(row.Tilbud) || 0;
  return value;
};
const getAppointmentNumber = (_, row: Agreement) => {
  return row.appointmentNumber;
};

const getMontage = (_, row: Agreement) => {
  return row.Montage || "0";
};
const getUnderleverandør = (_, row: Agreement) => {
  return row.Underleverandør || "0";
};
const getNy = (_, row: Agreement) => {
  return row.ny || "0";
};
const getGammel = (_, row: Agreement) => {
  return row.gammel || "0";
};
const getColor = (v: string): string => {
  const num = Number(v);
  if (num >= 15) {
    return "rgba(0, 144, 0, 0.45)";
  } else if (num < 15 && num > -10) {
    return "rgba(255, 255, 0, 0.45)";
  } else {
    return "rgba(255, 0, 0, 0.45)";
  }
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const renderCell = (params: GridRenderCellParams<any, string>) => {
  const isAutoGenerated = String(params.id).includes(
    "auto-generated-row-appointmentNumber"
  );
  return (
    <Stack
      sx={{
        backgroundColor: isAutoGenerated
          ? "transparent"
          : getColor(params.value),
      }}
    >
      {params.value}
    </Stack>
  );
};

export const functionMap = {
  appointmentNumber: getAppointmentNumber,
  Tilbud: getTilbud,
  Montage: getMontage,
  Montage_First: getMontage,
  Underleverandør_First: getUnderleverandør,
  Underleverandør: getUnderleverandør,
  Materialer: getMaterial,
  estimatedProjection: getEstimatedProjection,
  estimatedProduction: getEstimatedProduction,
  estimatedMontage: getEstimatedMontage,
  projectionDiff: getProjectionDiff,
  productionDiff: getProductionDiff,
  estimateDone: getEstimateDone,
  plusMinus: getPlusMinus,
  montageDiff: getMontageDiff,
  finalMontage: getFinalMontage,
  ny: getNy,
  gammel: getGammel,
};

export const fieldToAddCollection = [
  "appointmentNumber",
  "appointmentNumber1",
  // 'subject',
  // 'AgreementManager',
  // 'Real_Projektering_hr',
  // 'Real_Svendetimer_hr',
  // 'Real_Montagetimer_hr',
  "Tilbud",
  "Montage",
  "Underleverandør",
  "ny",
  "gammel",
];

export const columns = (data): GridColDef[] => {
  return [
    {
      field: "appointmentNumber",
      headerName: "Nr",
      headerAlign: "right",
      align: "right",
      minWidth: 90,
      valueGetter: (params, row) => {
        return row.appointmentNumber1;
      },
      maxWidth: 91,
      hideSortIcons: true,
      pinnable: true,
    },
    {
      field: "subject",
      headerName: "Subject",
      minWidth: 240,
      maxWidth: 241,
      valueGetter: (params) => {
        if (params) {
          return params;
        } else {
          return "Total";
        }
      },
      hideSortIcons: true,
      pinnable: true,
    },
    {
      field: "AgreementManager",
      headerName: "Ansvarlig",
      minWidth: 80,
      maxWidth: 81,
      hideSortIcons: true,
      valueGetter: (params) => {
        if (params) {
          const name = (params as string) || "";
          const initials = name
            .split(" ")
            .map((n) => n[0])
            .join("")
            .toUpperCase();
          return initials;
        } else {
          return "-";
        }
      },
    },
    {
      field: "Tilbud",
      headerName: "Tilbud",
      headerAlign: "right",
      align: "right",
      minWidth: 140,
      maxWidth: 141,
      editable: true,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalTilbud = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalTilbud = result[id]?.reduce((sum, item) => {
              const tilbudValue =
                parseFloat(item.Tilbud?.replace(/,/g, "")) || 0;
              return sum + tilbudValue;
            }, 0);
          }

          return totalTilbud !== 0
            ? numberWithCommas(totalTilbud) + " DKK"
            : totalTilbud;
        } else {
          return parms !== "0" ? parms + " DKK" : parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "Montage_First",
      headerName: "Montage",
      headerAlign: "right",
      align: "right",
      editable: false,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalMontage = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalMontage = result[id]?.reduce((sum, item) => {
              const tilbudValue =
                parseFloat(item.Montage_First?.replace(/,/g, "")) || 0;
              return sum + tilbudValue;
            }, 0);
          }
          return totalMontage !== 0
            ? numberWithCommas(totalMontage) + " DKK"
            : totalMontage;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "Underleverandør_First",
      headerName: "Underleverandør",
      headerAlign: "right",
      align: "right",
      minWidth: 130,
      maxWidth: 131,
      editable: true,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalUnderleverandør = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalUnderleverandør = result[id]?.reduce((sum, item) => {
              const tilbudValue =
                parseFloat(item.Underleverandør_First?.replace(/,/g, "")) || 0;
              return sum + tilbudValue;
            }, 0);
          }
          return totalUnderleverandør !== 0
            ? numberWithCommas(totalUnderleverandør) + " DKK"
            : totalUnderleverandør;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "Montage",
      headerName: "Montage",
      headerAlign: "right",
      align: "right",
      // minWidth: 140,
      // maxWidth: 141,
      editable: true,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalMontage = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalMontage = result[id]?.reduce((sum, item) => {
              const tilbudValue =
                parseFloat(item.Montage?.replace(/,/g, "")) || 0;
              return sum + tilbudValue;
            }, 0);
          }
          return totalMontage !== 0
            ? numberWithCommas(totalMontage) + " DKK"
            : totalMontage;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },

    {
      field: "Underleverandør",
      headerName: "Underleverandør",
      headerAlign: "right",
      align: "right",
      minWidth: 130,
      maxWidth: 131,
      editable: true,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalUnderleverandør = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalUnderleverandør = result[id]?.reduce((sum, item) => {
              const tilbudValue =
                parseFloat(item.Underleverandør?.replace(/,/g, "")) || 0;
              return sum + tilbudValue;
            }, 0);
          }
          return totalUnderleverandør !== 0
            ? numberWithCommas(totalUnderleverandør) + " DKK"
            : totalUnderleverandør;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "Materialer",
      headerName: "Materialer",
      headerAlign: "right",
      align: "right",
      minWidth: 140,
      maxWidth: 141,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalMaterialer = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalMaterialer = result[id]?.reduce((sum, item) => {
              const tilbudValue =
                parseFloat(item.Materialer?.replace(/,/g, "")) || 0;
              return sum + tilbudValue;
            }, 0);
          }

          return totalMaterialer !== 0
            ? numberWithCommas(totalMaterialer) + " DKK"
            : totalMaterialer;
        } else {
          return parms !== "0" ? parms + " DKK" : parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "estimatedProjection",
      headerName: "Projektering",
      headerAlign: "right",
      align: "right",
      minWidth: 100,
      maxWidth: 101,
      // valueGetter: getEstimatedProjection,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalEstimatedProjection = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalEstimatedProjection = result[id]?.reduce((sum, item) => {
              const tilbudValue =
                parseFloat(item.estimatedProjection?.replace(/,/g, "")) || 0;
              return sum + tilbudValue;
            }, 0);
          }

          return totalEstimatedProjection;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "estimatedProduction",
      headerName: "Produktion",
      headerAlign: "right",
      align: "right",
      minWidth: 100,
      maxWidth: 101,
      // valueGetter: getEstimatedProduction,
      valueGetter: (params, row) => {
        const calculateValue = (dataRow) => {
          const tilbud = Number(
            dataRow.Tilbud?.toString().replace(/,/g, "") || 0
          );
          const montage = Number(dataRow.Montage || 0);
          const under = Number(dataRow.Underleverandør || 0);
          const material = Number(
            dataRow.Materialer?.toString().replace(/,/g, "") || 0
          );
          const estimate = Number(dataRow.estimatedProjection || 0);

          return getRoundedValue(
            ((tilbud - montage - under - material) / 750 - estimate).toFixed(1)
          );
        };

        if (!params) {
          const grouped = data.reduce((acc, item) => {
            const groupKey = item.appointmentNumber1.split("-")[0];
            acc[groupKey] = acc[groupKey] || [];
            acc[groupKey].push(item);
            return acc;
          }, {});

          const symbols = Object.getOwnPropertySymbols(row);
          const id = row[symbols[0]].split("/").pop();

          const totalEstimatedProduction = (grouped[id] || []).reduce(
            (sum, item) => {
              return sum + Number(calculateValue(item));
            },
            0
          );

          return numberWithCommas(totalEstimatedProduction);
        } else {
          const value = calculateValue(row);
          return numberWithCommas(value);
        }
      },
      hideSortIcons: true,
    },
    {
      field: "estimatedMontage",
      headerName: "Montage",
      headerAlign: "right",
      align: "right",
      minWidth: 80,
      maxWidth: 81,
      // valueGetter: getEstimatedMontage,
      valueFormatter: (params, row) => {
        if (params === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalEstimatedMontage = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalEstimatedMontage = result[id]?.reduce((sum, item) => {
              const montage = parseFloat(item.Montage?.replace(/,/g, "")) || 0;

              const estimatedMontage = (
                (montage - montage * 0.08) /
                630
              ).toFixed(1);
              return sum + Number(estimatedMontage);
            }, 0);
          }

          return totalEstimatedMontage;
        } else {
          const montage = Number(row.Montage || 0);
          const estimatedMontage = ((montage - montage * 0.08) / 630).toFixed(
            1
          );
          return numberWithCommas(getRoundedValue(estimatedMontage));
        }
      },
      hideSortIcons: true,
    },
    {
      field: "Real_Projektering_hr",
      headerName: "Projektering",
      minWidth: 100,
      maxWidth: 101,
      headerAlign: "right",
      align: "right",
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalEstimatedProjection = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalEstimatedProjection = result[id]?.reduce((sum, item) => {
              const tilbudValue = item?.Real_Projektering_hr;
              return sum + tilbudValue;
            }, 0);
          }

          return totalEstimatedProjection;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "Real_Svendetimer_hr",
      headerName: "Produktion",
      minWidth: 90,
      maxWidth: 91,
      headerAlign: "right",
      align: "right",
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalReal_Svendetimer_hr = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalReal_Svendetimer_hr = result[id]?.reduce((sum, item) => {
              const tilbudValue = item?.Real_Svendetimer_hr;
              return sum + tilbudValue;
            }, 0);
          }

          return totalReal_Svendetimer_hr;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "Real_Montagetimer_hr",
      headerName: "Montage",
      minWidth: 80,
      maxWidth: 81,
      headerAlign: "right",
      align: "right",
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalReal_Montagetimer_hr = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalReal_Montagetimer_hr = result[id]?.reduce((sum, item) => {
              const tilbudValue = item?.Real_Montagetimer_hr;
              return sum + tilbudValue;
            }, 0);
          }

          return totalReal_Montagetimer_hr;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "Real_total_hr",
      headerName: "Total",
      minWidth: 80,
      maxWidth: 81,
      headerAlign: "right",
      align: "right",
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalReal_total_hr = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalReal_total_hr = result[id]?.reduce((sum, item) => {
              const tilbudValue = item?.Real_total_hr;
              return sum + tilbudValue;
            }, 0);
          }

          return totalReal_total_hr;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "projectionDiff",
      headerName: "Projektering",
      minWidth: 100,
      maxWidth: 101,
      headerAlign: "right",
      align: "right",
      renderCell,
      // valueGetter: getProjectionDiff,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalProjektering = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalProjektering = result[id]?.reduce((sum, item) => {
              const estimate = Number(item.estimatedProjection || 0);
              const real = Number(item.Real_Projektering_hr || 0);

              const value = getRoundedValue((estimate - real).toFixed(1));

              return sum + Number(value);
            }, 0);
          }

          return totalProjektering;
        } else {
          const estimate = Number(row.estimatedProjection || 0);
          const real = Number(row.Real_Projektering_hr || 0);

          const value = getRoundedValue((estimate - real).toFixed(1));

          return value;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "productionDiff",
      headerName: "Timer Tilbage",
      minWidth: 90,
      maxWidth: 91,
      headerAlign: "right",
      align: "right",
      // valueGetter: getProductionDiff,
      valueFormatter: (params, row) => {
        if (params === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalTimerTilbag = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalTimerTilbag = result[id]?.reduce((sum, item) => {
              const estimatedProduction = getEstimatedProduction(params, item);
              const estimateproductionNew = Number(
                estimatedProduction?.toString().replace(/,/g, "") || 0
              );
              const realnew = Number(item.Real_Svendetimer_hr || 0);
              const value = getRoundedValue(
                (estimateproductionNew - realnew).toFixed(1)
              );
              return sum + Number(value);
            }, 0);
          }

          return totalTimerTilbag;
        } else {
          const estimatedProduction = getEstimatedProduction(params, row);
          const estimateproductionNew = Number(
            estimatedProduction?.toString().replace(/,/g, "") || 0
          );
          const realnew = Number(row.Real_Svendetimer_hr || 0);
          return getRoundedValue((estimateproductionNew - realnew).toFixed(1));
        }
      },
      hideSortIcons: true,
    },
    {
      field: "ny",
      headerName: "Færdig% ex. montage nu",
      minWidth: 100,
      maxWidth: 101,
      headerAlign: "right",
      align: "right",
      editable: true,
      // valueGetter: getNy,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let total_ny = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            total_ny = result[id]?.reduce((sum, item) => {
              const tilbudValue = parseFloat(item?.ny);
              return sum + tilbudValue;
            }, 0);
          }

          return total_ny;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "gammel",
      headerName: "Færdig% ex. montage før",
      minWidth: 100,
      maxWidth: 101,
      headerAlign: "right",
      align: "right",
      editable: true,
      // valueGetter: getGammel,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let total_gammel = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            total_gammel = result[id]?.reduce((sum, item) => {
              const tilbudValue = parseFloat(item?.gammel);
              return sum + tilbudValue;
            }, 0);
          }

          return total_gammel;
        } else {
          return parms;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "estimateDone",
      headerName: "Est timer ift færdig %",
      minWidth: 100,
      maxWidth: 101,
      headerAlign: "right",
      align: "right",
      // valueGetter: getEstimateDone,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalEstimateDone = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalEstimateDone = result[id]?.reduce((sum, item) => {
              const estimate = Number(
                item.estimatedProduction?.toString().replace(/,/g, "") || 0
              );
              const real = Number(item.ny || 0);

              let value = getRoundedValue(((estimate * real) / 100).toFixed(1));
              value = numberWithCommas(value);
              return sum + Number(value);
            }, 0);
          }

          return totalEstimateDone;
        } else {
          const estimate = Number(
            row.estimatedProduction?.toString().replace(/,/g, "") || 0
          );
          const real = Number(row.ny || 0);

          let value = getRoundedValue(((estimate * real) / 100).toFixed(1));
          value = numberWithCommas(value);
          return value;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "plusMinus",
      headerName: "+/- timer",
      minWidth: 90,
      maxWidth: 100,
      headerAlign: "right",
      align: "right",
      renderCell,
      // valueGetter: getPlusMinus,
      valueGetter: (params, row) => {
        if (params === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalPlusMinus = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalPlusMinus = result[id]?.reduce((sum, item) => {
              const estimate = Number(item.Real_Svendetimer_hr || 0);
              const real = Number(
                item.estimateDone?.toString().replace(/,/g, "") || 0
              );
              let value = getRoundedValue((real - estimate).toFixed(1));
              value = numberWithCommas(value);
              return sum + Number(value);
            }, 0);
          }

          return totalPlusMinus;
        } else {
          const estimate = Number(row.Real_Svendetimer_hr || 0);
          const real = Number(
            row.estimateDone?.toString().replace(/,/g, "") || 0
          );
          let value = getRoundedValue((real - estimate).toFixed(1));
          value = numberWithCommas(value);
          return value;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "montageDiff",
      headerName: "timer tilbage",
      minWidth: 89,
      maxWidth: 90,
      headerAlign: "right",
      align: "right",
      renderCell,
      // valueGetter: getMontageDiff,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalEstimatedMontage = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalEstimatedMontage = result[id]?.reduce((sum, item) => {
              const estimate = Number(item.estimatedMontage || 0);
              const real = Number(item.Real_Montagetimer_hr || 0);
              const value = getRoundedValue((estimate - real).toFixed(1));
              return sum + Number(value);
            }, 0);
          }

          return totalEstimatedMontage;
        } else {
          const estimate = Number(row.estimatedMontage || 0);
          const real = Number(row.Real_Montagetimer_hr || 0);
          const value = getRoundedValue((estimate - real).toFixed(1));
          return value;
        }
      },
      hideSortIcons: true,
    },
    {
      field: "finalMontage",
      headerName: "Afsat fragt",
      minWidth: 85,
      maxWidth: 86,
      headerAlign: "right",
      align: "right",
      // valueGetter: getFinalMontage,
      valueGetter: (parms, row) => {
        if (parms === undefined) {
          const grouped = data.reduce((acc, item) => {
            const base = item.appointmentNumber1.split("-")[0];
            if (!acc[base]) {
              acc[base] = [];
            }
            acc[base].push(item);
            return acc;
          }, {});

          const result = Object.keys(grouped).reduce((acc, key) => {
            acc[key] = grouped[key];
            return acc;
          }, {});

          let totalEstimatedMontage = 0;
          const symbols = Object.getOwnPropertySymbols(row);

          let id = row[symbols[0]];
          id = id.split("/").pop();
          if (result[id]?.length > 1) {
            totalEstimatedMontage = result[id]?.reduce((sum, item) => {
              const value = getRoundedValue(
                (Number(item.Montage || 0) * 0.08).toFixed(1)
              );
              const baseValue = sum + Number(value);
              return baseValue !== 0 ? baseValue + " DKK" : baseValue;
            }, 0);
          }

          return totalEstimatedMontage;
        } else {
          const value = getRoundedValue(
            (Number(row.Montage || 0) * 0.08).toFixed(1)
          );
          return value !== 0 ? value + " DKK" : value;
        }
      },
      hideSortIcons: true,
    },
  ];
};

export const columnGroup: GridColumnGroup[] = [
  {
    groupId: "info",
    headerName: "Aftale info",
    children: [
      {
        field: "appointmentNumber",
      },
      {
        field: "subject",
      },
      {
        field: "AgreementManager",
      },
    ],
  },
  {
    groupId: "input",
    headerName: "Tilbud",
    children: [
      {
        field: "Tilbud",
      },
      {
        field: "Montage_First",
      },
      {
        field: "Montage",
      },
      {
        field: "Underleverandør_First",
      },
      {
        field: "Underleverandør",
      },
    ],
  },
  {
    groupId: "estimatedTill",
    headerName: "Estimeret",
    children: [
      {
        field: "Materialer",
      },
      {
        field: "estimatedProjection",
      },
      {
        field: "estimatedProduction",
      },
      {
        field: "estimatedMontage",
      },
    ],
  },
  {
    groupId: "timerBrugt",
    headerName: "Realiseret",
    children: [
      {
        field: "Real_Projektering_hr",
      },
      {
        field: "Real_Svendetimer_hr",
      },
      {
        field: "Real_Montagetimer_hr",
      },
      {
        field: "Real_total_hr",
      },
    ],
  },
  {
    groupId: "timerTilbage",
    headerName: "Timer tilbage",
    children: [
      {
        field: "projectionDiff",
      },
      // {
      //   field: 'productionDiff',
      // },
    ],
  },
  // {
  //   groupId: 'ex montage',
  //   headerName: 'Færdig ex montage %',
  //   children: [
  //     {
  //       field: 'ny',
  //     },
  //     {
  //       field: 'gammel',
  //     },
  //   ],
  // },
  {
    groupId: "productionStadie",
    headerName: "Produktion Stadie",
    children: [
      {
        field: "productionDiff",
      },
      {
        field: "ny",
      },
      {
        field: "gammel",
      },
      {
        field: "estimateDone",
      },
      {
        field: "plusMinus",
      },
    ],
  },
  {
    groupId: "montage",
    headerName: "Montage",
    children: [
      {
        field: "montageDiff",
      },
      {
        field: "finalMontage",
      },
    ],
  },
];
